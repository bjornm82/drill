// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package drill generated by go-bindata.// sources:
// schema.json
package drill

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xcd\xce\xda\x30\x10\xbc\xf3\x14\x96\xe9\x11\x9a\xde\x2a\xe5\x16\xda\x88\x46\x82\x80\xd2\xb4\x52\x55\x71\x30\x64\x03\x46\x8e\x1d\x6c\xe7\x80\x50\xde\xfd\x93\x9d\x80\xf2\x8b\xe0\xe3\xc2\x7a\x76\x76\xbc\x3b\x1b\xdf\x26\x08\x21\x84\xbf\xa8\xc3\x09\x32\x82\x5d\x84\x4f\x5a\xe7\xae\xe3\x9c\x95\xe0\xf3\x0a\xfd\x2a\xe4\xd1\x49\x24\x49\xf5\xfc\xdb\x77\xa7\xc2\xa6\x78\x56\x57\xd2\xc4\x54\x4d\x13\x49\x19\xbb\x83\x9a\x6a\x06\x06\xae\xc8\x28\x15\x12\x11\x8e\x2c\x07\x01\xd7\xf2\xfa\x60\x5e\x73\x4b\x14\xfb\x33\x1c\xf4\x1d\x95\x70\x29\xa8\x04\xa3\xfc\xdf\x22\x16\xe5\x24\x83\x9a\x61\xcf\xea\xc2\x9a\xc7\x94\x02\x4b\x14\xb6\xc0\xae\x16\xca\xa5\xc8\x41\x6a\x0a\x0a\xbb\xe8\xd6\x91\x6a\x22\xad\x66\x94\x96\x94\x1f\xf1\x23\x59\x76\x2e\xfd\x54\x61\xdd\xde\x68\x2d\x91\x92\x5c\x1b\xf3\xd8\x24\x49\x12\xaa\xa9\xe0\x84\x05\x1a\x32\x53\x9d\x12\xa6\xa0\xc3\xa2\x75\xae\xad\x3c\xee\x6f\x8b\x31\xe8\x75\x8b\xd1\xf1\xbd\xaf\x3f\x92\xa3\x2a\x2c\x18\x23\x7b\x06\xb8\x47\xd8\x0d\x74\x32\xb2\xac\x7e\x2f\x63\x59\xf4\x6c\x17\xcd\x5f\xf9\x6c\x9a\x77\xd4\x87\x75\x2c\x13\x78\x91\x19\x4f\xf1\x22\x58\x06\x61\x8c\x67\x08\x2f\x82\xd0\x8b\xfe\xd9\x68\xb3\x59\xf9\x5e\x68\xc2\x9f\x5e\xec\xdb\xff\xcd\x9f\xc5\xca\x46\x41\x18\xfb\x4b\x3f\x32\x61\x1c\xac\xfd\xdf\xb1\xb7\xde\x9a\xc3\x5f\x2f\xfa\xf1\xcb\x8b\xf0\xee\xad\x99\x72\x09\x07\xaa\xa8\xe0\xaf\x0d\x46\xb9\x86\x23\xc8\xf7\x7c\x6b\x6c\xfa\xa5\x4b\xf6\x42\x30\x20\xfc\x99\x7d\x09\xa4\xa4\x60\x1a\xbb\x48\xcb\x02\x86\xbb\xe9\xa1\x03\xfd\x35\x9e\xd0\xb6\xf9\x7d\xd9\x77\x34\x19\x96\xab\xa2\x72\x52\x7e\x04\x00\x00\xff\xff\xbd\x60\x01\xcf\x1e\x05\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 1310, mode: os.FileMode(420), modTime: time.Unix(1616738554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
